<?xml version="1.0"?>
<robot xmlns:xacro="http://www.ros.org/wiki/xacro">

  <material name="white"><color rgba="1.0 1.0 1.0 1.0"/></material>
  <material name="black"><color rgba="0.0 0.0 0.0 1.0"/></material>
  <material name="gray"><color rgba="0.5 0.5 0.5 1.0"/></material>
  <material name="dark_gray"><color rgba="0.2 0.2 0.2 1.0"/></material>
  <material name="light_gray"><color rgba="0.8 0.8 0.8 1.0"/></material>
  <material name="red"><color rgba="1.0 0.0 0.0 1.0"/></material>
  <material name="green"><color rgba="0.0 1.0 0.0 1.0"/></material>
  <material name="blue"><color rgba="0.0 0.0 1.0 1.0"/></material>
  <material name="yellow"><color rgba="1.0 1.0 0.0 1.0"/></material>
  <material name="cyan"><color rgba="0.0 1.0 1.0 1.0"/></material>
  <material name="magenta"><color rgba="1.0 0.0 1.0 1.0"/></material>
  <material name="orange"><color rgba="1.0 0.5 0.0 1.0"/></material>
  <material name="purple"><color rgba="0.5 0.0 0.5 1.0"/></material>
  <material name="brown"><color rgba="0.6 0.3 0.0 1.0"/></material>
  <material name="silver"><color rgba="0.75 0.75 0.75 1.0"/></material>
  <material name="gold"><color rgba="1.0 0.84 0.0 1.0"/></material>

  <xacro:macro name="joint_template" params="
    joint_name
    joint_type
    parent_link
    child_link
    origin_xyz
    origin_rpy := '0 0 0'
    axis_xyz := '0 0 0'
    lower_limit := '0.0'
    upper_limit := '0.0'
    effort := '0.0'
    velocity := '0.0'
    dynamics_damping := '0.0'
    dynamics_friction := '0.0'
    safety_lower := '0.0'
    safety_upper := '0.0'
    k_position := '0.0'
    k_velocity := '0.0'
    calibration_position := 'none'
    mimic_joint := 'none'
    mimic_multiplier := '1.0'
    mimic_offset := '0.0'
  ">
    <joint name="${joint_name}" type="${joint_type}">
      <parent link="${parent_link}"/>
      <child link="${child_link}"/>
      <origin xyz="${origin_xyz}" rpy="${origin_rpy}"/>
      <xacro:if value="${joint_type != 'fixed'}">
        <axis xyz="${axis_xyz}"/>
      </xacro:if>
      <xacro:if value="${joint_type == 'revolute' or joint_type == 'prismatic'}">
        <limit lower="${lower_limit}" upper="${upper_limit}" effort="${effort}" velocity="${velocity}"/>
      </xacro:if>
      <xacro:if value="${dynamics_damping != '0.0' or dynamics_friction != '0.0'}">
        <dynamics damping="${dynamics_damping}" friction="${dynamics_friction}"/>
      </xacro:if>
      <xacro:if value="${safety_lower != '0.0' or safety_upper != '0.0' or k_position != '0.0' or k_velocity != '0.0'}">
        <safety_controller soft_lower_limit="${safety_lower}" soft_upper_limit="${safety_upper}" k_position="${k_position}" k_velocity="${k_velocity}"/>
      </xacro:if>
      <xacro:if value="${calibration_position != 'none'}">
        <calibration rising="${calibration_position}"/>
      </xacro:if>
      <xacro:if value="${mimic_joint != 'none'}">
        <mimic joint="${mimic_joint}" multiplier="${mimic_multiplier}" offset="${mimic_offset}"/>
      </xacro:if>
    </joint>
  </xacro:macro>

  <xacro:macro name="link_template" params="
    link_name
    mass := '1.0'
    inertia_ixx := '1.0'
    inertia_ixy := '0.0'
    inertia_ixz := '0.0'
    inertia_iyy := '1.0'
    inertia_iyz := '0.0'
    inertia_izz := '1.0'
    inertial_origin_xyz := '0 0 0'
    inertial_origin_rpy := '0 0 0'

    visual_geometry_type := 'box'
    visual_geometry_size := '1 1 1'
    visual_geometry_mesh_filename := ''
    visual_geometry_mesh_scale := '1 1 1'
    visual_origin_xyz := '0 0 0'
    visual_origin_rpy := '0 0 0'
    visual_material := 'gray'

    collision_geometry_type := 'box'
    collision_geometry_size := '1 1 1'
    collision_geometry_mesh_filename := ''
    collision_geometry_mesh_scale := '1 1 1'
    collision_origin_xyz := '0 0 0'
    collision_origin_rpy := '0 0 0'

    add_sensor := 'false'
    sensor_type := 'none'
    sensor_name := ''
    sensor_origin_xyz := '0 0 0'
    sensor_origin_rpy := '0 0 0'
  ">
    <link name="${link_name}">
      <visual>
        <origin xyz="${visual_origin_xyz}" rpy="${visual_origin_rpy}"/>
        <geometry>
          <xacro:if value="${visual_geometry_type == 'box'}">
            <box size="${visual_geometry_size}"/>
          </xacro:if>
          <xacro:if value="${visual_geometry_type == 'cylinder'}">
            <cylinder radius="${visual_geometry_size.split(' ')[0]}" length="${visual_geometry_size.split(' ')[1]}"/>
          </xacro:if>
          <xacro:if value="${visual_geometry_type == 'sphere'}">
            <sphere radius="${visual_geometry_size}"/>
          </xacro:if>
          <xacro:if value="${visual_geometry_type == 'mesh' and visual_geometry_mesh_filename != ''}">
            <mesh filename="${visual_geometry_mesh_filename}" scale="${visual_geometry_mesh_scale}"/>
          </xacro:if>
        </geometry>
        <material name="${visual_material}"/>
      </visual>

      <collision>
        <origin xyz="${collision_origin_xyz}" rpy="${collision_origin_rpy}"/>
        <geometry>
          <xacro:if value="${collision_geometry_type == 'box'}">
            <box size="${collision_geometry_size}"/>
          </xacro:if>
          <xacro:if value="${collision_geometry_type == 'cylinder'}">
            <cylinder radius="${collision_geometry_size.split(' ')[0]}" length="${collision_geometry_size.split(' ')[1]}"/>
          </xacro:if>
          <xacro:if value="${collision_geometry_type == 'sphere'}">
            <sphere radius="${collision_geometry_size}"/>
          </xacro:if>
          <xacro:if value="${collision_geometry_type == 'mesh' and collision_geometry_mesh_filename != ''}">
            <mesh filename="${collision_geometry_mesh_filename}" scale="${collision_geometry_mesh_scale}"/>
          </xacro:if>
        </geometry>
      </collision>

      <inertial>
        <origin xyz="${inertial_origin_xyz}" rpy="${inertial_origin_rpy}"/>
        <mass value="${mass}"/>
        <inertia ixx="${inertia_ixx}" ixy="${inertia_ixy}" ixz="${inertia_ixz}"
                 iyy="${inertia_iyy}" iyz="${inertia_iyz}" izz="${inertia_izz}"/>
      </inertial>

      <xacro:if value="${add_sensor == 'true' and sensor_type != 'none'}">
        <sensor type="${sensor_type}" name="${sensor_name}">
          <origin xyz="${sensor_origin_xyz}" rpy="${sensor_origin_rpy}"/>
        </sensor>
      </xacro:if>
    </link>
  </xacro:macro>

</robot>

<!--===============================================================================
                           XACRO URDF MACRO LIBRARY
        Author: ROBOSAPIEN (AAYUSH KHANDELWAL)   |    Version: 1.0

      PURPOSE:
      --------
      This file provides reusable, parameterized Xacro macros for generating
      URDF links and joints. You can quickly build consistent, error-free
      URDF robot models by reusing these templates and customizing only what
      you need for each link or joint.

      COMPONENTS:
      -----------
      1. Materials
         - Common colors/materials for visuals.
      2. joint_template
         - Macro for defining URDF joints (all types, incl. limits, dynamics,
           safety, mimic, calibration).
      3. link_template
         - Macro for defining URDF links (geometry, inertial, visuals,
           collisions, optional sensors, mesh support).

      HOW TO USE:
      -----------
      1. In your main .urdf.xacro file, first load this file:
         <xacro:include filename="your_macro_library.xacro" />

      2. Create links using the macro, overriding defaults as needed:
         <xacro:link_template
             link_name="base_link"
             mass="2.5"
             visual_geometry_type="box"
             visual_geometry_size="1 1 0.5"
             visual_material="gray"
         />

      3. Create joints between links:
         <xacro:joint_template
             joint_name="shoulder"
             joint_type="revolute"
             parent_link="base_link"
             child_link="shoulder_link"
             origin_xyz="0 0 0.5"
             axis_xyz="0 0 1"
             lower_limit="-1.57"
             upper_limit="1.57"
             effort="10"
             velocity="2"
         />

      4. (Optional) Customize other parameters as needed for each macro call.
         All macro parameters have sensible defaults; override only what you need.

      EXAMPLE ROBOT SKELETON:
      -----------------------
      <robot xmlns:xacro="http://www.ros.org/wiki/xacro" name="my_robot">
        <xacro:include filename="your_macro_library.xacro"/>
        <!-- Define links -->
        <xacro:link_template link_name="base_link"/>
        <xacro:link_template link_name="shoulder_link" visual_geometry_type="cylinder" visual_geometry_size="0.1 0.3"/>
        <!-- Define joints -->
        <xacro:joint_template joint_name="shoulder" joint_type="revolute" parent_link="base_link" child_link="shoulder_link" axis_xyz="0 0 1"/>
      </robot>

      NOTES:
      ------
      - All macro parameters can be overridden in each use.
      - Defaults are just for convenienceâ€”**always provide correct mass/inertia/limits for real robots!**
      - For mesh geometry, set type to 'mesh' and provide filename (e.g., package://my_robot/meshes/part.stl).
      - Sensors are optional and can be added to links.
      - Sensor tags are for SDF/Gazebo; standard URDF will ignore them.

===============================================================================-->